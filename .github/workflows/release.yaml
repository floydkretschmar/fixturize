name: Release Workflow

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Extract version and commit message
        id: extract_version
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MESSAGE =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION=$(echo $COMMIT_MESSAGE | awk '{print $1}' | sed 's/^v//')
            MESSAGE_BODY=$(echo $COMMIT_MESSAGE | sed -e "s/^v[0-9]\+\.[0-9]\+\.[0-9]\+ //")
            echo "::set-output name=VERSION::$VERSION"
            echo "::set-output name=MESSAGE_BODY::$MESSAGE_BODY"
          else
            echo "::set-output name=VERSION::"
            echo "::set-output name=MESSAGE_BODY::$COMMIT_MESSAGE"
          fi

      - name: Build and Test
        run: ./gradlew clean build

      - name: Create Git Tag
        if: steps.extract_version.outputs.VERSION != ''
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag ${{ steps.extract_version.outputs.VERSION }}
          git push origin ${{ steps.extract_version.outputs.VERSION }}

      - name: Get previous tag
        if: steps.extract_version.outputs.VERSION != ''
        id: get_previous_tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ || echo "none")
          echo "::set-output name=PREVIOUS_TAG::$PREVIOUS_TAG"

      - name: Set release body
        if: steps.extract_version.outputs.VERSION != ''
        id: set_release_body
        run: |
          if [ "${{ steps.get_previous_tag.outputs.PREVIOUS_TAG }}" != "none" ]; then
          RELEASE_BODY="${{ steps.extract_version.outputs.MESSAGE_BODY }}\n\nCommits since previous release: [link](https://github.com/${{ github.repository }}/compare/${{ steps.get_previous_tag.outputs.PREVIOUS_TAG }}...v${{ steps.extract_version.outputs.VERSION }})"
          else
          RELEASE_BODY="${{ steps.extract_version.outputs.MESSAGE_BODY }}\n\nAll commits associated with this release: [link](https://github.com/${{ github.repository }}/commits/v${{ steps.extract_version.outputs.VERSION }})"
          fi
          echo "::set-output name=RELEASE_BODY::$RELEASE_BODY"

      - name: Create GitHub Release
        if: steps.extract_version.outputs.VERSION != ''
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.extract_version.outputs.VERSION }}
          release_name: ${{ steps.extract_version.outputs.VERSION }}
          body: ${{ steps.set_release_body.outputs.RELEASE_BODY }}
          draft: false
          prerelease: false

      - name: Publish to Maven Central
        if: steps.extract_version.outputs.VERSION != ''
        run: ./gradlew publish -Pversion=${{ steps.extract_version.outputs.VERSION }}
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          SIGNING_SECRET_KEY: ${{ secrets.SIGNING_SECRET_KEY }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}